events {
    worker_connections  1024;
}

http {
    server {
        listen 80;
        server_name 52.78.52.191;

        location / {
            # /api/ 경로를 처리할 때 springboot로 전달
            rewrite ^/api/(.*)$ /$1 break;
            proxy_pass http://springboot:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Referer '';

            # CORS 설정
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            # OPTIONS 요청에 대한 응답
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
                add_header 'Access-Control-Max-Age' 3600 always;
                add_header 'Access-Control-Allow-Credentials' 'true';
                return 204;  # 204는 요청을 처리하지 않음으로 응답
            }
        }
    }
}
